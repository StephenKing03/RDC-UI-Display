import tkinter as tk
from tkinter import ttk
import customtkinter as ctk

from  PIL import Image, ImageTk
import os


redcolor = '#ff9028'
bluecolor = '#08cdf9'
scaling_unit_height = 1
scaling_unit_width = 1
scaling_unit = 1
groundcolor = '#574f4e'
transparent_grey = '#808080'
greencolor = '#038024'




#main window for the team display
class Display(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("RDC Match Display")
        self.geometry("800x600")
        #self.style = ttk.Style()
        #self.style.theme_use("bootstrap")
        #self.create_widgets()


  
        #define a grid
        self.columnconfigure(0, weight = 3, uniform = 'b')
        self.columnconfigure(1, weight = 2, uniform = 'b')
        self.columnconfigure(2, weight = 3, uniform = 'b')

        self.rowconfigure(0, weight = 75)
        self.rowconfigure(1, weight = 25)
        
        #define the frames
        
        self.blue_console = TeamConsole(self, bluecolor)
        self.blue_console.grid(row = 0, column = 0, sticky = 'nsew')

        self.middle_console = MiddleConsole(self)
        self.middle_console.grid(row = 0, column = 1, sticky = 'nsew')

        

        self.red_console = TeamConsole(self, redcolor)
        self.red_console.grid(row = 0, column = 2, sticky = 'nsew')
        
        self.match_status_console = MatchStatusConsole(self)
        self.match_status_console.grid(row = 1, column = 0, columnspan = 3, sticky = 'nsew')

   
        

        self.mainloop()

class MatchStatusConsole(ctk.CTkFrame):
    def __init__(self, master):
        super().__init__(master, fg_color = 'grey')
        self.create_widgets()

    def create_widgets(self):
        #self.match_status = ttk.Label(self, text="Match Status", background = 'grey')
        #self.match_status.pack(fill = tk.BOTH, expand = True)

        #define grid
        self.columnconfigure(0, weight = 3, uniform = 'c')
        self.columnconfigure(1, weight = 3, uniform = 'c')
        self.columnconfigure(2, weight = 3, uniform = 'c')
        
        
        self.rowconfigure(0, weight = 1, uniform = 'd') #progress bar
        self.rowconfigure(1, weight = 2, uniform = 'd')
        self.rowconfigure(2, weight = 2, uniform = 'd')

        #progress bar
        self.progress = ctk.CTkProgressBar(self, mode = 'determinate')
        self.progress.grid(row = 0, column = 0, columnspan = 3, sticky = 'nsew')

        #points display
        self.pointsFrame = ctk.CTkFrame(self, fg_color = 'black')
        self.pointsFrame.grid(row = 1, column = 1, rowspan = 2, sticky = 'nsew')

        points_blue_label = ctk.CTkLabel(self.pointsFrame, text = "12", fg_color = bluecolor, font = ('Helvetica', 60 * scaling_unit_height, 'bold'), )
        points_red_label = ctk.CTkLabel(self.pointsFrame, text = "15", fg_color = redcolor, font = ('Helvetica', 60 * scaling_unit_height, 'bold'), )
        
        points_blue_label.pack(side = tk.LEFT, fill = "both", expand = True)
        points_red_label.pack(side = tk.RIGHT, fill = "both", expand = True)

        #team names
        name_height = scaling_unit_height * 50
        name_width = scaling_unit_width  * 250
        self.team1 = ctk.CTkLabel(self, text = "Blue Team 1", fg_color = groundcolor, font = ('Helvetica', 15 * scaling_unit, 'bold'), width = name_width, height = name_height,padx = 5*scaling_unit, pady = 5 * scaling_unit, anchor = 'w')
        self.team1.grid(row = 1, column = 0, sticky = 'ew')
        
        self.team2 = ctk.CTkLabel(self, text = "Red Team 1", fg_color = groundcolor, font = ('Helvetica', 15 * scaling_unit, 'bold'), width = name_width, height = name_height,padx = 5*scaling_unit, pady = 10 * scaling_unit, anchor = 'e')
        self.team2.grid(row = 1, column = 2, sticky = 'ew')

        self.team1 = ctk.CTkLabel(self, text = "Blue Team 2", fg_color = groundcolor, font = ('Helvetica', 15 * scaling_unit, 'bold'), width = name_width, height = name_height,padx = 5*scaling_unit, pady = 5 * scaling_unit, anchor = 'w')
        self.team1.grid(row = 2, column = 0, sticky = 'ew')
        
        self.team2 = ctk.CTkLabel(self, text = "Red Team 2", fg_color = groundcolor, font = ('Helvetica', 15 * scaling_unit, 'bold'), width = name_width, height = name_height,padx = 5*scaling_unit, pady = 10 * scaling_unit, anchor = 'e')
        self.team2.grid(row = 2, column = 2, sticky = 'ew')
        
class MiddleConsole(ctk.CTkFrame):
    def __init__(self, master):
        super().__init__(master, fg_color = groundcolor)
        self.create_widgets()

    def create_widgets(self):

        #define grid

        self.columnconfigure(0, weight = 1)

        self.rowconfigure(0, weight = 1)
        self.rowconfigure(1, weight = 1)
        self.rowconfigure(2, weight = 1)


        #refill_timer frame
        self.refill_timer_frame = ctk.CTkFrame(self, fg_color = groundcolor)
        self.refill_timer_frame.pack(fill = tk.X, expand = False)

        self.refill_timer_label = ctk.CTkLabel(self.refill_timer_frame, text = "Nachschub in: ", fg_color = groundcolor, font = ('Helvetica', 20 * scaling_unit, 'bold'))
        self.refill_timer_label.pack(fill = tk.X, expand = True)
        
        self.refill_timer_time = ctk.CTkLabel(self.refill_timer_frame, text = "30s", fg_color = groundcolor, font = ('Helvetica', 20 * scaling_unit, 'bold'))
        self.refill_timer_time.pack()

        self.refill_progress = ctk.CTkProgressBar(self, mode = 'determinate')   
        self.refill_progress.pack(fill = tk.X, expand = False)


        #timer display
        self.timer = ctk.CTkLabel(self, text = "00:00", fg_color = 'black', font = ('Helvetica', 60 * scaling_unit, 'bold'))
        self.timer.pack(fill = tk.BOTH, expand = True)

    def animate_endgame(self):
        pass

class TeamConsole(ctk.CTkFrame):
    def __init__(self, master,color):
        super().__init__(master, fg_color = color)
        self.create_widgets(color)
        self.init_color = color

    def create_widgets(self, color):

        #create grid
        self.init_color = color
        self.columnconfigure(0, weight = 3, uniform = 1)
        self.columnconfigure(1, weight = 5, uniform = 1)

        self.rowconfigure(0, weight = 2, uniform = 'a')
        self.rowconfigure(1, weight = 2, uniform = 'a')
        self.rowconfigure(2, weight = 2, uniform = 'a')
        self.rowconfigure(3, weight = 3, uniform = 'a')
        #import the image for the goal
        script_dir = os.path.dirname(__file__) #<-- absolute dir the script is in
        image_path = os.path.join(script_dir, "GoalZeichnung.png")
        self.resized_image = Image.open(image_path).resize((100, 100))
        

        self.image_canvas = tk.Canvas(self, background = groundcolor)
        self.image_canvas.grid(row = 0, column = 1, rowspan = 3, sticky = 'nsew', padx = 5 * scaling_unit, pady = 25 * scaling_unit)

         # Bind the configure event to resize the image
        self.image_canvas.bind('<Configure>', self.resize_image)
        
        #import labels for scores:
        self.highgoal_label = ctk.CTkLabel(self, text = "0", fg_color = groundcolor, font = ('Helvetica', 20 * scaling_unit, 'bold'), corner_radius = 15)
        self.midgoal_label = ctk.CTkLabel(self, text = "0", fg_color = groundcolor, font = ('Helvetica', 20 * scaling_unit, 'bold'), corner_radius = 15)
        self.lowgoal_label = ctk.CTkLabel(self, text = "0", fg_color = groundcolor, font = ('Helvetica', 20 * scaling_unit, 'bold'), corner_radius = 15)

        self.highgoal_label.grid(row = 0, column = 0, sticky = 'nsew', padx = 5 * scaling_unit, pady = 25 * scaling_unit)
        self.midgoal_label.grid(row = 1, column = 0, sticky = 'nsew', padx = 5 * scaling_unit, pady = 25 * scaling_unit)
        self.lowgoal_label.grid(row = 2, column = 0, sticky = 'nsew', padx = 5 * scaling_unit, pady = 25 * scaling_unit)

        


        #label for parking

        class parking_display(ctk.CTkFrame):
            def __init__(self, master):
                super().__init__(master, border_color = "black", border_width= 5, fg_color = groundcolor)

                self.parking_status = 0 #0 = not parked, 1 = high, 2 = high park

                self.rowconfigure((0,1,2), weight = 1, uniform = 'f')
                self.columnconfigure(0, weight = 1, uniform = 'g')
                self.parkingindicator = ctk.CTkLabel(self, text = " -P-", bg_color= "transparent", fg_color = groundcolor, font = ('Helvetica', 20 * scaling_unit, 'bold'), corner_radius = 15)
                self.parkingindicator.grid(row = 0, column = 0, sticky = 'nsew', padx = 5 * scaling_unit, pady = 5* scaling_unit)

                self.parkingindicator_high = ctk.CTkLabel(self, text = "H", bg_color= "transparent", fg_color = transparent_grey, font = ('Helvetica', 20 * scaling_unit), corner_radius = 8)          
                self.parkingindicator_high.grid(row = 1, column = 0, sticky = 'nsew', padx = 15 * scaling_unit, pady = 7 * scaling_unit)

                self.parkingindicator_low = ctk.CTkLabel(self, text = "L", bg_color= "transparent", fg_color = transparent_grey, font = ('Helvetica', 20 * scaling_unit), corner_radius = 8)
                self.parkingindicator_low.grid(row = 2, column = 0, sticky = 'nsew', padx = 15 * scaling_unit, pady = 7 * scaling_unit)

            def update_parking(self):
                if(self.parking_stats == 0):
                    self.parkingindicator.config(fg_color = transparent_grey)
                elif(self.parking_stats == 1):
                    self.parkingindicator.config(fg_color = greencolor)
                elif(self.parking_stats == 2):
                    self.parkingindicator.config(fg_color = redcolor)
                else:
                    self.parkingindicator.config(fg_color = transparent_grey)
        
        bottom_frame = tk.Frame(self,background = self.init_color)
        bottom_frame.grid(row = 3, column = 0, columnspan = 2, sticky = 'nsew')

        bottom_frame.grid_columnconfigure((1,2), weight = 1, uniform = 'h')
        bottom_frame.grid_rowconfigure(1, weight = 1, uniform = 'h')

        self.park1 = parking_display(bottom_frame).grid(row = 0, column = 1, sticky = 'nsew', padx = 25 * scaling_unit)
        self.park2 = parking_display(bottom_frame).grid(row = 0, column = 2, sticky = 'nsew', padx = 25 * scaling_unit)

        #self.penalty_frame = ctk.CTkLabel(bottom_frame, text = "0", fg_color = groundcolor, font = ('Helvetica', 20 * scaling_unit, 'bold'), corner_radius = 15)
        
    
    def resize_image(self, event):
        # Get the new size of the frame
        new_width = int(event.width)
        new_height = event.height

        # Resize the image to fit the frame
        resized_image = self.resized_image.resize((new_width, new_height))
        self.image_tk = ImageTk.PhotoImage(resized_image)

        # Update the label's image
        self.image_canvas.create_image(0, 0, image=self.image_tk, anchor='nw')        
        

        


'''
class RedConsole(ctk.CTkFrame):
    def __init__(self, master):
        super().__init__(master, fg_color = redcolor)
        #self.create_widgets()

    def create_widgets(self):
        self.red_console = ttk.Label(self, text="Red Console", background = redcolor)
        self.red_console.pack(fill = tk.BOTH, expand = True)
  '''  
Display()